# JMH version: 1.25
# VM version: JDK 11.0.11, Java HotSpot(TM) 64-Bit Server VM, 11.0.11+9-LTS-194
# VM invoker: C:\jdks\11\bin\java.exe
# VM options: -Xms1G -Xmx1G
# Warmup: 2 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.mail.polis.ads.hash.HashTableJmh.benchmarkDefaultHashmap
# Parameters: (TEST_DATA_SIZE = 1000000)

# Run progress: 0,00% complete, ETA 00:05:00
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 277,713 ms/op
# Warmup Iteration   2: 299,561 ms/op
Iteration   1: 310,567 ms/op
Iteration   2: 304,533 ms/op
Iteration   3: 297,839 ms/op

# Run progress: 16,67% complete, ETA 00:06:26
# Fork: 1 of 2
# Warmup Iteration   1: 311,025 ms/op
# Warmup Iteration   2: 293,397 ms/op
Iteration   1: 287,190 ms/op
Iteration   2: 294,467 ms/op
Iteration   3: 287,689 ms/op

# Run progress: 33,33% complete, ETA 00:05:09
# Fork: 2 of 2
# Warmup Iteration   1: 308,522 ms/op
# Warmup Iteration   2: 299,527 ms/op
Iteration   1: 310,712 ms/op
Iteration   2: 306,212 ms/op
Iteration   3: 304,489 ms/op


Result "ru.mail.polis.ads.hash.HashTableJmh.benchmarkDefaultHashmap":
  298,460 ±(99.9%) 28,196 ms/op [Average]
  (min, avg, max) = (287,190, 298,460, 310,712), stdev = 10,055
  CI (99.9%): [270,264, 326,656] (assumes normal distribution)


# JMH version: 1.25
# VM version: JDK 11.0.11, Java HotSpot(TM) 64-Bit Server VM, 11.0.11+9-LTS-194
# VM invoker: C:\jdks\11\bin\java.exe
# VM options: -Xms1G -Xmx1G
# Warmup: 2 iterations, 10 s each
# Measurement: 3 iterations, 10 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: ru.mail.polis.ads.hash.HashTableJmh.benchmarkHashTableImpl
# Parameters: (TEST_DATA_SIZE = 1000000)

# Run progress: 50,00% complete, ETA 00:03:52
# Warmup Fork: 1 of 1
# Warmup Iteration   1: 600,396 ms/op
# Warmup Iteration   2: 559,676 ms/op
Iteration   1: 542,381 ms/op
Iteration   2: 566,111 ms/op
Iteration   3: 554,133 ms/op

# Run progress: 66,67% complete, ETA 00:02:34
# Fork: 1 of 2
# Warmup Iteration   1: 574,039 ms/op
# Warmup Iteration   2: 562,212 ms/op
Iteration   1: 570,865 ms/op
Iteration   2: 581,593 ms/op
Iteration   3: 558,640 ms/op

# Run progress: 83,33% complete, ETA 00:01:17
# Fork: 2 of 2
# Warmup Iteration   1: 579,559 ms/op
# Warmup Iteration   2: 560,120 ms/op
Iteration   1: 586,365 ms/op
Iteration   2: 560,719 ms/op
Iteration   3: 554,146 ms/op


Result "ru.mail.polis.ads.hash.HashTableJmh.benchmarkHashTableImpl":
  568,722 ±(99.9%) 36,769 ms/op [Average]
  (min, avg, max) = (554,146, 568,722, 586,365), stdev = 13,112
  CI (99.9%): [531,952, 605,491] (assumes normal distribution)


# Run complete. Total time: 00:07:43

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

Benchmark                             (TEST_DATA_SIZE)  Mode  Cnt    Score    Error  Units
HashTableJmh.benchmarkDefaultHashmap           1000000  avgt    6  298,460 ± 28,196  ms/op
HashTableJmh.benchmarkHashTableImpl            1000000  avgt    6  568,722 ± 36,769  ms/op

Benchmark result is saved to C:\Algorithms\2021-ads\build\results\jmh\results.txt
